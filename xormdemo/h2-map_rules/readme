一、名称映射规则

 [结构体名称] 到 [表名] 的映射?
 [结构体 field] 到 [表字段的名称] 映射?
 [结构体 field的数据类型] 到[表字段的数据类型] 关系?(见五)

1.xorm 内置了三种映射规则：
    (1).SnakeMapper 支持struct为驼峰式命名，表结构为下划线命名之间的转换，这个是默认的Maper；===> Students <===>students
    (2).SameMapper 支持结构体名称和对应的表名称以及结构体field名称与对应的表字段名称相同的命名；
    (3).GonicMapper 和SnakeMapper很类似，但是对于特定词支持更好，比如ID会翻译成id而不是i_d。





二、前缀映射、后缀映射和缓存映射
   todo 就是结构体在与表映射的过程中是否要统一添加前缀和后缀，建议不使用该功能，因为真正的开发过程，表命名前缀和后缀都可能是多样的



三、使用Table和Tag改变名称映射
   todo  比如表名想单独指明，比如某个结构体field映射的表字段名想单独指明都可以支持的，请看:

1.如果结构体拥有 TableName() string 的成员方法，那么此方法的返回值即是该结构体对应的数据库表名。
   func (m *Node) TableName() string {
   	  return "mid_crontab_node"
   }
2.通过 sturct 中 field 对应的 Tag 中使用 xorm:"'column_name'"可以使该 field 对应的 Column 名称为指定名称。
  todo 这里使用两个单引号将 Column 名称括起来是为了防止名称冲突，因为我们在Tag中还可以对这个Column进行更多的行为定义。
  todo 就怕自定义的表字段名与行为符一样，比如:你要是将字段名叫做created,则这个created是表示插入数据的时候自动填充时间还是指明的字段名，如果你加了单引号就是字段名了，否则就是自动填充添加时间的行为符了
  todo 如果名称不冲突的情况，单引号也可以不使用，即你起的字段名压根与所有的行为符名称都不一样。


四、Column属性定义
  todo  这里指的就是通过定义field中xorm的tag来完成数据库column的字段定义
  见:demo01




五、Go与字段类型对应表

   todo  搞清楚 go结构体字段类型 ====>xorm类型  ====>数据库表字段类型



